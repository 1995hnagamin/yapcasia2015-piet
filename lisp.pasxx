TOGGLE
PUSH 370
TOGGLE

LABEL INPUTLOOP
INC
PUSH 4
MUL
PUSH 1
ADD
DUP
PUSH 41
# \n * 4 + 1 = 41
SUB
JEZ BEGIN
JMP INPUTLOOP

LABEL BEGIN
SIZE
DUP
PUSH 1
SUB
ROLL
LABEL BEGIN2

# DEBUG begin2

# '\n'
DUP
PUSH 41
SUB
JEZ OUTPUT

# ' '
DUP
PUSH 129
SUB
JEZ READSPACE

# '<'
DUP
PUSH 241
SUB
JEZ READLAMBDA

# '!'
DUP
PUSH 133
SUB
JEZ GARBAGE

# '('
DUP
PUSH 161
SUB
JEZ BEGIN

# ')'
DUP
PUSH 165
SUB
JEZ EVAL

# '0'-'9'
DUP
PUSH 4
MOD
PUSH 1
SUB
NOT
JEZ DONTREADNUM
DUP
PUSH 189
GREATER
JEZ DONTREADNUM
DUP
PUSH 229
GREATER
JEZ READNUM
LABEL DONTREADNUM

# '+'
DUP
PUSH 173
SUB
JEZ BEGIN

# '-'
DUP
PUSH 181
SUB
JEZ BEGIN

# '*'
DUP
PUSH 169
SUB
JEZ BEGIN

# '/'
DUP
PUSH 189
SUB
JEZ BEGIN

# 残りは変数
PUSH 2
ADD
MOV
TOGGLE
# 環境
LABEL FINDVARIABLELOOP
# 宣言されていない変数はないものとしたいよね
DUP
ROLL 3 2
DUP
ROLL 4 1
SUB
JEZ FINDVARIABLEEND
SWAP
SIZE
PUSH 1
ROLL
JMP FINDVARIABLELOOP

LABEL FINDVARIABLEEND
POP
# 不要なkeyを殺す
SIZE
DUP
PUSH 1
SUB
ROLL
LABEL COPYVALUELOOP
DUP
PUSH 498
SUB
JEZ COPYVALUELOOP2
DUP
PUSH 370
SUB
JEZ COPYVALUELOOP2
DUP
MOV
SIZE
DUP
PUSH 1
SUB
ROLL
JMP COPYVALUELOOP

LABEL COPYVALUELOOP2
DUP
PUSH 370
SUB
JEZ COPYVALUEEND
SIZE
PUSH 1
ROLL
JMP COPYVALUELOOP2

LABEL COPYVALUEEND
SIZE
PUSH 1
ROLL
TOGGLE
# DEBUG copyvalueend
JMP BEGIN

# DEBUG ここへ来てしまったのですね…

LABEL END
HALT


LABEL OUTPUT
SIZE
JEZ END
SIZE
SIZE
PUSH 2
SUB
ROLL
DUP
PUSH 4
MOD
JEZ OUTPUTNUM
JMP OUTPUTCHAR

LABEL OUTPUTCHAR
PUSH 4
DIV
OUTC
JMP OUTPUT

LABEL OUTPUTNUM
PUSH 4
DIV
OUTN
JMP OUTPUT


# 対応する>まで読み飛ばす
LABEL READLAMBDA
PUSH 1
# 閉じていない括弧の数
LABEL READLAMBDALOOP
DUP
JEZ READLAMBDAEND
SIZE
DUP
PUSH 1
SUB
ROLL
DUP
ROLL 3 1
PUSH 249
# '>' * 4 + 1 = 249
SUB
NOT
SUB
# >なら括弧の数が一つ減る
SWAP
DUP
ROLL 3 1
PUSH 241
# '>' * 4 + 1 = 241
SUB
NOT
ADD
# <なら括弧の数が一つ増える
JMP READLAMBDALOOP

LABEL READLAMBDAEND
POP
JMP BEGIN


LABEL READSPACE
POP
JMP BEGIN


LABEL READNUM
PUSH 0
SWAP
# accumulator
LABEL READNUMLOOP
# | acc X
PUSH 4
DIV
PUSH 48
SUB
SWAP
PUSH 10
MUL
ADD
# read new char and (loop|break)
SIZE
DUP
PUSH 1
SUB
ROLL

DUP
PUSH 4
MOD
PUSH 1
SUB
NOT
JEZ READNUMEND
# 文字でなければREADNUMEND
DUP
PUSH 189
GREATER
JEZ READNUMEND
DUP
PUSH 229
GREATER
JEZ READNUMLOOP
JMP READNUMEND

LABEL READNUMEND
# | sum X
SWAP
PUSH 4
MUL
SWAP
JMP BEGIN2


LABEL GARBAGE
POP
# !を殺す
TOGGLE
# DEBUG G:BEF
LABEL GARBAGELOOP
DUP
PUSH 498
# '|' * 4 + 2
SUB
JEZ GARBAGEEND
POP
JMP GARBAGELOOP

LABEL GARBAGEEND
# DEBUG G:AFT
POP
TOGGLE
JMP BEGIN


LABEL EVAL
LABEL FINDLPAR
PUSH 133
# '!' * 4 + 1
# # DEBUG BANG!
# HALT
SIZE
PUSH 2
ROLL
PUSH 1
# 開かれていない括弧の数
LABEL FINDLPARLOOP
DUP
JEZ FINDLPAREND
SWAP
DUP
PUSH 161
SUB
NOT
SWAP
ROLL 3 1
SUB
# (なら括弧の数が一つ減る
SWAP
DUP
PUSH 165
SUB
NOT
ROLL 3 2
ADD
# )なら括弧の数が一つ増える
SWAP
SIZE
PUSH 1
ROLL
JMP FINDLPARLOOP

LABEL FINDLPAREND
POP
SIZE
DUP
PUSH 2
SUB
ROLL

DUP
PUSH 241
# <
SUB
JEZ APPLICATION

DUP
PUSH 173
# +
SUB
JEZ PLUS

DUP
PUSH 181
# -
SUB
JEZ SUBST

DUP
PUSH 169
# *
SUB
JEZ MULTI

DUP
PUSH 189
SUB
JEZ DEVIDE

# DEBUG おい
HALT


LABEL APPLICATION
TOGGLE
PUSH 498
# '|' * 4 + 2
TOGGLE
SIZE
DUP
PUSH 1
SUB
ROLL
PUSH 2
ADD
MOV
PUSH 1
LABEL APPLICATIONFLPLOOP
# ラムダ式の終わりを探す(FINDLPARと同じ)
DUP
JEZ APPLICATIONFLPEND
SIZE
DUP
PUSH 1
SUB
ROLL
DUP
PUSH 249
SUB
NOT
ROLL 3 2
SWAP
SUB
SWAP
DUP
PUSH 241
SUB
NOT
ROLL 3 2
ADD
JMP APPLICATIONFLPLOOP
LABEL APPLICATIONFLPEND
# この文字以降に現れるオブジェクトを変数の値としてMOVする。
# 括弧の対応とかをいい感じに取る
PUSH 128
# 開いている括弧[<(]の数 * 128 + (ラムダ抽象の層の数)
# 128層以上<を重ねられると苦しくなる
LABEL BINDLOOP
# DEBUG bindloop
SIZE
DUP
PUSH 1
SUB
ROLL

DUP
PUSH 161
# '(' * 4 + 1
SUB
NOT
PUSH 128
MUL
ROLL 3 2
ADD
SWAP

DUP
PUSH 241
# '<' * 4 + 1
SUB
NOT
PUSH 129
MUL
ROLL 3 2
ADD
SWAP

DUP
PUSH 165
# ')' * 4 + 1
SUB
NOT
PUSH 128
MUL
ROLL 3 2
SWAP
SUB
SWAP

DUP
PUSH 249
# '>' * 4 + 1
SUB
NOT
PUSH 129
MUL
ROLL 3 2
SWAP
SUB

DUP
JEZ BINDEND
SWAP
MOV
JMP BINDLOOP

LABEL BINDEND
POP
SWAP
POP
# 上から2番目の0をpopしてる
# なぜこの2行が必要なのか全く見当がつかないけどとにかく殺す
POP
POP
# POP ), >
PUSH 2
# 開かれていない括弧の数
LABEL SEETOPLOOP
DUP
JEZ SEETOPEND
SWAP

DUP
PUSH 161
SUB
NOT
ROLL 3 2
SWAP
SUB
SWAP

DUP
PUSH 241
SUB
NOT
ROLL 3 2
SWAP
SUB
SWAP

DUP
PUSH 165
SUB
NOT
ROLL 3 2
ADD
SWAP

DUP
PUSH 165
SUB
NOT
ROLL 3 2
ADD
SWAP
SIZE
PUSH 1
ROLL
JMP SEETOPLOOP 

LABEL SEETOPEND
POP
# 殺す 開かれていない括弧の数
SIZE
DUP
PUSH 2
SUB
ROLL
POP
POP
# pop (, <
SIZE
DUP
PUSH 1
SUB
ROLL
JMP BEGIN2

LABEL MINUS
HALT

LABEL PLUS
POP
POP
# KILL (+
SIZE
DUP
PUSH 4
SUB
ROLL
POP
POP
ADD
# DEBUG plus
JMP BEGIN

LABEL SUBST
POP
POP
# KILL (+
SIZE
DUP
PUSH 4
SUB
ROLL
POP
POP
SUB
JMP BEGIN

LABEL MULTI
POP
POP
# KILL (*
SIZE
DUP
PUSH 4
SUB
ROLL
POP
POP
PUSH 4
DIV
SWAP
PUSH 4
DIV
SWAP
MUL
PUSH 4
MUL
# DEBUG MULTI
JMP BEGIN

LABEL DEVIDE
POP
POP
# KILL (/
SIZE
DUP
PUSH 4
SUB
ROLL
POP
POP
DIV
PUSH 4
MUL
JMP BEGIN
